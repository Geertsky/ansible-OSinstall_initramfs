---
- name: "Partition using parted and install Minimal"
  hosts: installer
  tasks:
  - name: "Read vda device information (always use unit when probing)"
    community.general.parted:
      device: /dev/vda
      unit: MiB
    register: vda_info
    tags: prepare

  - name: "Remove a volume group with name vg.rh"
    community.general.lvg:
      vg: vg.rh
      state: absent
      force: true
    tags: prepare

  - name: "Remove all partitions from disk"
    community.general.parted:
      device: /dev/vda
      number: '{{ item.num }}'
      state: absent
    loop: '{{ vda_info.partitions }}'
    tags: prepare

  - name: "Create a new primary partition with a size of 600MiB"
    community.general.parted:
      device: /dev/vda
      number: 1
      state: present
      part_end: 600MiB
    tags: partition

  - name: "Create a new primary partition with a size of 1GiB"
    community.general.parted:
      device: /dev/vda
      number: 2
      fs_type: xfs
      state: present
      part_start: 600MiB
      part_end: 1.6GiB
    tags: partition

  - name: "Create a new primary LVM partition with a size rest"
    community.general.parted:
      device: /dev/vda
      number: 3
      state: present
      flags: [ lvm ]
      part_start: 1.6GiB
      part_end: 100%
    tags: partition

  - name: "Create or resize a volume group on top of /dev/vda3"
    community.general.lvg:
      vg: vg.rh
      pvs: /dev/vda3
    tags: partition

  - name: "Create logical volumes"
    community.general.lvol:
      vg: vg.rh
      lv: swap
      size: 512
    tags: partition

  - name: "Create logical volumes"
    community.general.lvol:
      vg: vg.rh
      lv: root
      size: 100%FREE
    tags: partition

  - name: "Create a xfs filesystem on /dev/vda1"
    community.general.filesystem:
      fstype: xfs
      opts: '-L boot'
      dev: /dev/vda1
      force: true
    tags: partition

  - name: "Create a vfat filesystem on /dev/vda2"
    community.general.filesystem:
      fstype: vfat
      dev: /dev/vda2
      force: true
    tags: partition


  - name: "Create a swap filesystem on /dev/vg.rh/swap"
    community.general.filesystem:
      fstype: swap
      opts: '-L swap'
      dev: /dev/vg.rh/swap
      force: true
    tags: partition

  - name: "Create a xfs filesystem on /dev/vg.rh/root"
    community.general.filesystem:
      fstype: xfs
      opts: '-L root'
      dev: /dev/vg.rh/root
      force: true
    tags: partition

  - name: "Mount up device /"
    ansible.posix.mount:
      path: /mnt
      src: LABEL=root
      fstype: xfs
      state: mounted
    tags: mount

  - name: "Mount up device /mnt/boot"
    ansible.posix.mount:
      path: /mnt/boot
      src: /dev/vda1
      fstype: xfs
      state: mounted
    tags: mount

  - name: "Mount up device /mnt/boot/efi"
    ansible.posix.mount:
      path: /mnt/boot/efi
      src: /dev/vda2
      fstype: vfat
      state: mounted
    tags: mount

  - name: "Install dnf config"
    ansible.builtin.copy:
      src: files/dnf.conf
      dest: /mnt/etc/dnf/
      mode: '0644'
    tags: installcopy

  - name: "Install genfstab"
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/glacion/genfstab/master/genfstab
      dest: /tmp/genfstab
      mode: '0755'
    tags: installcopy

  - name: "Install minimal, kernel and grub"
    ansible.builtin.dnf:
      name:
        - '@Fedora Server Edition'
#        - '@Minimal Install'
        - kernel
        - grub2-common
        - grub2-tools-minimal
        - grub2-tools
        - grub2-pc-modules
        - grub2-pc
        - grub2-efi-ia32
        - grub2-efi-x64
        - grub2-tools-extra
        - grub2-efi-ia32-cdboot
        - grub2-efi-x64-cdboot
        - grub2-tools-efi
        - grub2-efi-x64-modules
        - shim-x64
        - grub2-efi
        - lvm2
        - setup
        - efibootmgr
        - python3
      state: present
      installroot: /mnt
    tags: install

  - name: "Bind mount /dev /sys and /proc"
    ansible.posix.mount:
      path: /mnt/{{ item }}
      src: /{{ item }}
      opts: bind
      state: mounted
      fstype: none
    loop:
      - "/dev"
      - "/proc"
      - "/sys"
    tags: bindmount

  - name: "Touch .autorelabel"
    ansible.builtin.command:
      cmd: touch /mnt/.autorelabel
    tags: command

  - name: "Generate /etc/fstab"
    ansible.builtin.command:
      cmd: /tmp/genfstab -f /mnt -L /mnt
    register: fstab
    tags: command

  - name: "Write /etc/fstab"
    ansible.builtin.copy:
      content: "{{ fstab.stdout_lines | join('\n') }}\n"
      dest: /mnt/etc/fstab
    tags: command

  - name: A debug task to halt execution
    ansible.builtin.pause:
      prompt: "Halting execution"
    tags: [ never, debug ]

  - name: "Set root password"
    ansible.builtin.command:
      cmd: chroot /mnt /bin/sh -c 'echo password|passwd --stdin root'
    tags: prepare_chroot

  - name: "Unlink /etc/resolv.conf"
    ansible.builtin.command:
      cmd: unlink /mnt/etc/resolv.conf
    tags: prepare_chroot

  - name: "Copy resolv.conf to chroot"
    ansible.builtin.copy:
      remote_src: true
      src: /etc/resolv.conf 
      dest: /mnt/etc/
      mode: '0644'
    tags: prepare_chroot

  - name: "Generate chrooted ssh-keys"
    ansible.builtin.command:
      cmd: chroot /mnt /usr/bin/ssh-keygen -A
    tags: prepare_chroot

  - name: "Add root authorized_keys to chroot"
    ansible.builtin.copy:
      remote_src: true
      src: /root/.ssh/authorized_keys
      dest: /mnt/root/.ssh/
      mode: '0600'
    tags: prepare_chroot, try

  - name: "Set permission /root/.ssh"
    ansible.builtin.file:
      path: /mnt/root/.ssh
      mode: '0700'
    tags: prepare_chroot, try

  - name: "Mount devpts /dev/pts in chroot"
    ansible.builtin.command:
      cmd: chroot /mnt /usr/bin/mount devpts -t devpts /dev/pts
    tags: prepare_chroot, try

  - name: "Start chrooted sshd"
    ansible.builtin.command:
      cmd: chroot /mnt /usr/sbin/sshd -p 2222
    tags: prepare_chroot, try

- name: "Tasks to chroot"
  hosts: installer
  vars:
    ansible_port: 2222
  tasks:
  - name: "Install apache"
    ansible.builtin.dnf:
      name: httpd
      state: latest
    tags: chrootinstall

  - name: "Install grub2 /boot/grub2/grub.cfg"
    ansible.builtin.command:
      cmd: grub2-mkconfig -o /boot/grub2/grub.cfg
    tags: chrootcommands

  - name: "Install grub2 /boot/efi/EFI/fedora/grub.cfg"
    ansible.builtin.command:
      cmd: grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
    tags: chrootcommands

  - name: "Install grub2 /etc/grub2-efi.cfg"
    ansible.builtin.command:
      cmd: grub2-mkconfig -o /etc/grub2-efi.cfg
    tags: chrootcommands


  - name: "Register default kernel"
    ansible.builtin.command:
      cmd: grubby --default-kernel
    register: defaultkernel
    tags: chrootcommands2

  - name: "Debug"
    ansible.builtin.debug:
      var: defaultkernel
    tags: chrootcommands2

  - name: "Add grub entry for enforcing=0"
    ansible.builtin.command:
      cmd: "grubby --add-kernel {{ defaultkernel.stdout }} --copy-default --args=enforcing=0 --title 'Default kernel without selinux enforcing'"
    register: command
    tags: chrootcommands

  - name: "Configure grub to allow grubby to set which kernel to boot"
    ansible.builtin.copy:
      src: files/etc/default/grub
      dest: /etc/default/grub
      mode: '0644'
      owner: root
      group: root
      
  - name: "Set default grub entry"
    ansible.builtin.command:
      cmd: 'grubby --set-default-index=1'
    tags: chrootcommands

  - name: "Register new boot entry for next reboot only"
    ansible.builtin.command:
      cmd: 'grub2-reboot 0'
    tags: chrootcommands

  - name: "Finalize the installation"
    community.general.shutdown:
    tags: shutdown
    delegate_to: installer
    vars:
      ansible_ssh_port: 22
